/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: tech-market.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as tech$market_pb from './tech-market_pb';


export class TechMarketClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRegistration = new grpcWeb.MethodDescriptor(
    '/TechMarket/Registration',
    grpcWeb.MethodType.UNARY,
    tech$market_pb.CustomerAuthRequestPayload,
    tech$market_pb.AuthResponse,
    (request: tech$market_pb.CustomerAuthRequestPayload) => {
      return request.serializeBinary();
    },
    tech$market_pb.AuthResponse.deserializeBinary
  );

  registration(
    request: tech$market_pb.CustomerAuthRequestPayload,
    metadata: grpcWeb.Metadata | null): Promise<tech$market_pb.AuthResponse>;

  registration(
    request: tech$market_pb.CustomerAuthRequestPayload,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tech$market_pb.AuthResponse) => void): grpcWeb.ClientReadableStream<tech$market_pb.AuthResponse>;

  registration(
    request: tech$market_pb.CustomerAuthRequestPayload,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tech$market_pb.AuthResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TechMarket/Registration',
        request,
        metadata || {},
        this.methodDescriptorRegistration,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TechMarket/Registration',
    request,
    metadata || {},
    this.methodDescriptorRegistration);
  }

  methodDescriptorAuthentication = new grpcWeb.MethodDescriptor(
    '/TechMarket/Authentication',
    grpcWeb.MethodType.UNARY,
    tech$market_pb.CustomerAuthRequestPayload,
    tech$market_pb.AuthResponse,
    (request: tech$market_pb.CustomerAuthRequestPayload) => {
      return request.serializeBinary();
    },
    tech$market_pb.AuthResponse.deserializeBinary
  );

  authentication(
    request: tech$market_pb.CustomerAuthRequestPayload,
    metadata: grpcWeb.Metadata | null): Promise<tech$market_pb.AuthResponse>;

  authentication(
    request: tech$market_pb.CustomerAuthRequestPayload,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tech$market_pb.AuthResponse) => void): grpcWeb.ClientReadableStream<tech$market_pb.AuthResponse>;

  authentication(
    request: tech$market_pb.CustomerAuthRequestPayload,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tech$market_pb.AuthResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TechMarket/Authentication',
        request,
        metadata || {},
        this.methodDescriptorAuthentication,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TechMarket/Authentication',
    request,
    metadata || {},
    this.methodDescriptorAuthentication);
  }

  methodDescriptorUpdateCustomer = new grpcWeb.MethodDescriptor(
    '/TechMarket/UpdateCustomer',
    grpcWeb.MethodType.UNARY,
    tech$market_pb.CustomerUpdateRequestPayload,
    tech$market_pb.Customer,
    (request: tech$market_pb.CustomerUpdateRequestPayload) => {
      return request.serializeBinary();
    },
    tech$market_pb.Customer.deserializeBinary
  );

  updateCustomer(
    request: tech$market_pb.CustomerUpdateRequestPayload,
    metadata: grpcWeb.Metadata | null): Promise<tech$market_pb.Customer>;

  updateCustomer(
    request: tech$market_pb.CustomerUpdateRequestPayload,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: tech$market_pb.Customer) => void): grpcWeb.ClientReadableStream<tech$market_pb.Customer>;

  updateCustomer(
    request: tech$market_pb.CustomerUpdateRequestPayload,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: tech$market_pb.Customer) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TechMarket/UpdateCustomer',
        request,
        metadata || {},
        this.methodDescriptorUpdateCustomer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TechMarket/UpdateCustomer',
    request,
    metadata || {},
    this.methodDescriptorUpdateCustomer);
  }

}

